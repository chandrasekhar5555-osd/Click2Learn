trigger:
  - master

pool:
  vmImage: 'windows-latest'

variables:
  # Set your Angular project path
  angularPath: 'click2LearnInstructorClient'
  # Set your .NET project path
  dotnetPath: 'click2learnserver'

steps:

# Install Node.js for Angular
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

# Install Angular dependencies
- script: |
    cd $(angularPath)
    npm install
  displayName: 'Install Angular dependencies'

# Build Angular project
- script: |
    cd $(angularPath)
    npm run build -- --configuration=production
  displayName: 'Build Angular project'

# Publish Angular build files
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(angularPath)/dist/click2-learn-instructor-client'
    ArtifactName: 'angularBuild'
    publishLocation: 'Container'
  displayName: 'Publish Angular Build'

# Install .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'
  displayName: 'Install .NET 6 SDK'

# Restore .NET dependencies (using the wildcard to find all .csproj files)
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(dotnetPath)/**/*.csproj'  # Use wildcard to match all .csproj files
  displayName: 'Restore .NET dependencies'

# Build .NET project (using wildcard for all .csproj files)
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(dotnetPath)/**/*.csproj'  # Use wildcard to match all .csproj files
  displayName: 'Build .NET project'

# Run .NET tests (optional)
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(dotnetPath)/**/*.csproj'  # Use wildcard to match all .csproj files
  displayName: 'Run .NET tests'

# Publish .NET build artifacts
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '$(dotnetPath)/**/*.csproj'  # Use wildcard to match all .csproj files
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
  displayName: 'Publish .NET build'

# Publish .NET artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dotnetBuild'
    publishLocation: 'Container'
  displayName: 'Publish .NET build'

# Deploy .NET to Azure App Service
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'click2learnserviceconnection'
    appName: 'functionnclick2learm'  # Replace with your actual App Service name
    package: '$(Build.ArtifactStagingDirectory)'  # Ensure correct path to the publish output
  displayName: 'Deploy .NET API to Azure App Service'

# Deploy Angular to Azure Blob Storage or Static Web Apps (Optional)
- task: AzureCLI@2
  inputs:
    azureSubscription: 'click2learnserviceconnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage blob upload-batch -d '$web' --account-name 'emailservices9' -s '$(angularPath)/dist/click2-learn-instructor-client'
  displayName: 'Deploy Angular to Azure Storage (Optional)'
